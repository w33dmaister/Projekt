#define LEDPIN 13
  // Pin 13: Arduino has an LED connected on pin 13
  // Pin 11: Teensy 2.0 has the LED on pin 11
  // Pin  6: Teensy++ 2.0 has the LED on pin 6
  // Pin 13: Teensy 3.0 has the LED on pin 13
 
#define SENSORPIN 4
 
// variables will change:
int sensorState = 0, lastState=0;         // variable for reading the pushbutton status
 
void setup() {
  // initialize the LED pin as an output:
  pinMode(LEDPIN, OUTPUT);      
  // initialize the sensor pin as an input:
  pinMode(SENSORPIN, INPUT);     
  digitalWrite(SENSORPIN, HIGH); // turn on the pullup
  
  Serial.begin(9600);
}
 
void loop(){
  // read the state of the pushbutton value:
  sensorState = digitalRead(SENSORPIN);
 
  // check if the sensor beam is broken
  // if it is, the sensorState is LOW:
  if (sensorState == LOW) {     
    // turn LED on:
    digitalWrite(LEDPIN, HIGH);  
  } 
  else {
    // turn LED off:
    digitalWrite(LEDPIN, LOW); 
  }
  
  if (sensorState && !lastState) {
    Serial.println("Unbroken");
  } 
  if (!sensorState && lastState) {
    Serial.println("Broken");
  }
  lastState = sensorState;
}

//////////////////////////////////////////

unsigned long time1 = 0;
unsigned long time2 = 0;
unsigned long deltat = 0;
boolean flag1 = true; 
boolean flag2 = true;
boolean flag3 = false;
boolean done = true;
int gate1 = 2;
int gate2 = 3;

void setup()
{
  Serial.begin(9600);
  pinMode(gate1, INPUT);
  pinMode(gate2, INPUT);
}

void loop(void)
{
  if (digitalRead(gate1)== LOW && flag1 == true)
  {
    flag1 = false;
    time1 = millis();
    Serial.print("\n\nGate 1 tripped at time: ");
    Serial.print(time1);
    
  }
  
   if (digitalRead(gate2)== LOW && flag2 == true)
  {
    flag2 = false;
    time2 = millis();
    Serial.print("\n\nGate 2 tripped at time: ");
    Serial.print(time2);
    
  }
  
  if (flag1 == false && flag2==false & flag3 == false)
  {
    deltat = time2-time1;
    Serial.print("\n\ndelta t = ");
    Serial.print(deltat);
    Serial.print(" ms.");
    flag3 = true;
    
  }
}


//////////////////////////////


//pin definitions
#define RXA 12
#define RXB 10
#define TX 11



//variables

int timerA = 0;

//flag
boolean hitA = true;
boolean hitB = true;

boolean leave = false;

boolean transmitting_IR;
boolean receiving_IR;

void turn_off_IR ()
{
  // Instead of just adjusting the output on pin 11, this code also
  //   turns off the timer controlling the PWM output on pin 11
  
  TCCR2A = 0; // Disconnect PWM
  TCCR2B = 0; // Stops the timer
  OCR2A = 0;  // No timer top
  digitalWrite(11, LOW);  // Ensure output is off
  
  transmitting_IR = false;
}

void turn_on_IR ()
{
// Set up Timer2 (which can be connected to pins 3 and 11)
  // For full details, see:
  //   arduino.cc/en/Tutorial/SecretsOfArduinoPWM
  // The syntax here has me baffled, but the patterns of usage
  //   are clear if you look at the ATMega328 diagrams.
  //   _BV appears to stand for 'bit value'
  //   Different bits need to be set to control each timer
  //   Refer to diagrams for clarity

  TCCR2A = _BV(WGM21) | _BV(COM2A0); // This mode toggles output once per timer cycle
  TCCR2B = _BV(CS20);  // Do not scale the clock down - use 16 MHz timer rate.
  OCR2A = 210; // Divide sys. clock by 210, 1/2 cycle = 76 khz, 1 cycle = 38 khz
  
  // Output pin 11 should now be emitting a 38 khz signal.
  
  transmitting_IR = true;
}


void detectIR()
{
  // Determine if we are receiving an IR signal.
  //   if pin RXA is false = receiving
  //   if pin RXA is true = not receiving
  
  if(digitalRead(RXA)){
    //Serial.println("missA");
    hitA = false;
  }else{
    hitA = true;
  }
  
  delay(1);
  
  if(digitalRead(RXB)){
    //Serial.println("missB");
    hitB = false;
  }else{
    hitB = true;
  }
}


void pulseIR(){
  //manage the IR transmitter
  if (transmitting_IR)
    turn_off_IR();
  
  if (!transmitting_IR)
    turn_on_IR();     
}



void checkA(){
  //RX routine
  if(leave == false){ //
    if(hitA == false && hitB == true){ // if the RXA beam has been broken
   // The coin is rolling from A to B  
            leave = true; // set the passing flag 
            timerA=millis(); // start the timer
          }
      }
  }


void checkB(){
  if(leave == true){ //if the coin is rolling from A to V
    if(hitB == false && hitA == true){ // and the coin break the B beam
          
            leave=false; // reset the rolling flag
            int now = millis();
            int time = now - timerA; //compute the time
            Serial.println(time);
            Serial.println("-----------------------------------");
            delay(1000);
      
  }
}
}


void setup(){  
  pinMode(RXA, INPUT);
  pinMode(TX, OUTPUT);
  pinMode(RXB, INPUT);  
  Serial.begin(9600);
  Serial.println("Ready!");
  pulseIR();
  delay(100);
}

void loop(){
  pulseIR(); // transmit cycle
  detectIR(); // search for IR
  checkA(); // check A IR sensor
  checkB(); // check B IR sensor
}




//////////////////////////////



// measures velocity of projectiles
// projectile breaks foil strips 218 mm apart

#include <LiquidCrystal.h>

LiquidCrystal lcd(3,5,9,10,11,12);
unsigned long start=0, finish=0;
int startPin=4, finishPin=8, done=0;
float distance=218.0, interval, velocity;

void setup() {
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("Muzzle Velocity");
  pinMode(startPin, INPUT_PULLUP);
  pinMode(finishPin, INPUT_PULLUP);
}

void loop() {
  while(!start) {
    if(digitalRead(startPin) == HIGH)
      start = micros();
  }
  while(!finish) {
    if(digitalRead(finishPin) == HIGH)
      finish = micros();
  }
  while(!done) {
    interval = float(finish-start);
    velocity = distance*1000*3.28/interval;
    lcd.setCursor(0, 1);
    lcd.print(velocity);
    lcd.print(" ft/sec");
    done = 1;
  }
}





#include <Arduino.h>

#define PRVNIPIN 2
#define DRUHYPIN 3
 
// variables will change:
volatile byte prvniState = HIGH, druhyState = HIGH;       // variable for reading the pushbutton status
int pocet = 500, zmereno = 0;
unsigned long time1 = 0, time2 = 0, rozdil = 0;
float distance = 100.0, interval = 0, velocity = 0;


void inter1() {
  if(millis()-rozdil > 100){
    pocet--;
  }
  else {
    rozdil = millis();
  }
}

/*void inter2() {
     druhyState = !druhyState;
}*/

void setup() {
  // initialize the LED pin as an output:
  //pinMode(LEDPIN, OUTPUT);      
  // initialize the sensor pin as an input:
  pinMode(PRVNIPIN, INPUT);
  pinMode(DRUHYPIN, INPUT_PULLUP);     
  /*digitalWrite(PRVNIPIN, HIGH); // turn on the pullup
  digitalWrite(DRUHYPIN, HIGH);*/
  attachInterrupt(digitalPinToInterrupt(PRVNIPIN), inter1, CHANGE);
  //attachInterrupt(digitalPinToInterrupt(DRUHYPIN), inter2,  CHANGE);
  Serial.begin(9600);
}
 int zmena = 0;
void loop(){
  // read the state of the pushbutton value:
  // check if the sensor beam is broken
  // if it is, the sensorState is LOW:
 
  /*while(time1 == 0) {
    if(digitalRead(PRVNIPIN) == LOW){
      time1 = micros();
      pocet--;
      Serial.println("prvni");
    }
  }
  while(time2 == 0) {
    if(digitalRead(DRUHYPIN) == LOW){
      time2 = micros();
      zmereno = 1;
      Serial.println("druhy");
    }
  }
  
  if(zmereno == 1){
    interval = float(time2-time1);
    velocity = distance*1000*3.28/interval;
    Serial.println(velocity);
    Serial.println(pocet);
    time1 = 0;
    time2 = 0;
    zmereno = 0;
    }
    */
    if (pocet != zmena){
    Serial.println(pocet);
    zmena = pocet; 
    }
 }
